name: CI/CD Node Todos JSON

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "main" ]

# Variáveis globais (edite para seu namespace)
env:
  DOCKERHUB_NAMESPACE: ${{ vars.DOCKERHUB_NAMESPACE }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  HEROKU_APP: ${{ vars.HEROKU_APP }}

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Run unit tests (with coverage threshold)
        # seu npm test já usa --experimental-vm-modules e coverage v8 com threshold 100%
        run: npm test

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  build_and_push:
    name: Build & Push Docker
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # só no main
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker login (Docker Hub)
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from package.json
        id: meta
        run: |
          VERSION=$(jq -r .version package.json)
          SHA7=${GITHUB_SHA::7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "sha7=$SHA7" >> $GITHUB_OUTPUT

      - name: Build & Push (linux/amd64)
        run: |
          IMAGE="docker.io/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}"
          VERSION="${{ steps.meta.outputs.version }}"
          SHA7="${{ steps.meta.outputs.sha7 }}"

          docker buildx build \
            --platform linux/amd64 \
            --tag "${IMAGE}:latest" \
            --tag "${IMAGE}:v${VERSION}" \
            --tag "${IMAGE}:sha-${SHA7}" \
            --push .

      - name: Output image refs
        run: |
          echo "Pushed:"
          echo " - docker.io/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest"
          echo " - docker.io/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:v${{ steps.meta.outputs.version }}"
          echo " - docker.io/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:sha-${{ steps.meta.outputs.sha7 }}"

  deploy_heroku:
    name: Deploy to Heroku (Container)
    needs: [build_and_push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # só no main
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: meta
        run: |
          VERSION=$(jq -r .version package.json)
          SHA7=${GITHUB_SHA::7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "sha7=$SHA7" >> $GITHUB_OUTPUT

      - name: Docker login (Heroku Registry)
        run: |
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Pull image from Docker Hub
        run: |
          IMAGE="docker.io/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}"
          # Prefira tag imutável para reproducibilidade (sha-<7>)
          docker pull "${IMAGE}:sha-${{ steps.meta.outputs.sha7 }}"

      - name: Retag to Heroku registry
        run: |
          IMAGE="docker.io/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}"
          HEROKU_IMAGE="registry.heroku.com/${{ env.HEROKU_APP }}/web"
          docker tag "${IMAGE}:sha-${{ steps.meta.outputs.sha7 }}" "${HEROKU_IMAGE}"

      - name: Push to Heroku registry
        run: |
          docker push "registry.heroku.com/${{ env.HEROKU_APP }}/web"

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install-ubuntu.sh | sh

      - name: Release on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:release web --app ${{ env.HEROKU_APP }}